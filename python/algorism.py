# 알고리즘이란 문제를 풀기위한 

# 잘 짠 코드란 시간복잡도(빠르고), 공간복잡도(메모리 사용량), 가독성(한번에 알아보기 쉽게)을 고려한 코드 
# 시간복잡도가 가장 중요 

# Big-O 알고리즘 : 알고리즘의 효율성을 분석하는데 매우 유용, 접근적 실행시간: 입력값이 커지게될 때 시간의 추이를 보는 것 
# 
# 메모리와 실행시간은 반비례!

# 해시테이블 => 딕셔너리 

# 배열은 연속 방식의 자료구조  

# 연결방식이(주소값을 참조) 메모리 효율적

# 연결방식을 찾을 때는 첫번째 요소의 주소부터 찾음

# 연결방식의 맨앞과 맨뒤를 찾을때는 복잡도가 1이다.

# Stack : 프링글스 통, 나중에 들어온 것이(push) 먼저 나감 (pop) Last In First Out 후입선출, deque를 사용하면 성능이 올라감 DFS
# Queue : 종이컵 아래에서 하나씩 뽑는 도구. 편의점 음료수 냉장고, 먼저 들어온 것이 먼저 나감 First In First Out 선입선출 BFS
# deque (double ended queue): 스택과 큐를 합친 형태, 시간복잡도는 O(1), 슬라이싱,index 지원하지 않음,  

# 해시함수를 통한 hash value는 길이가 동일

# 비선형자료구조 : 데이터 요소가 순차적으로 배열되지 않은 자료구조, 메모리를 효율적으로 사용